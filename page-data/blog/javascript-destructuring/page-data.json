{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/javascript-destructuring/","result":{"data":{"markdownRemark":{"excerpt":"Destructuring is a ES6 feature that is both loved and hated. For simplicity’s sake, I’ll be using ES and JS interchangeably. ECMAScript is the standardized…","html":"<p>Destructuring is a ES6 feature that is both loved and hated.<br>\nFor simplicity’s sake, I’ll be using ES and JS interchangeably. ECMAScript is the standardized <a href=\"https://tc39.es/ecma262\">language specification</a> while JavaScript is the actual language implemented by different engines, for example <a href=\"https://v8.dev/\">V8</a>, <a href=\"https://developer.apple.com/documentation/javascriptcore\">JavaScriptCore</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey\">SpiderMonkey</a>. ES6 specifically is <a href=\"https://www.ecma-international.org/ecma-262/6.0\">ECMAScript 2015</a>.\nOne the one hand it simplifies assignments of variables in the current scope and prevents a lot of code duplication to write deeper accessor chaining (DRY - Don’t Repeat Yourself), on the other hand it also introduces more syntax a potential user would have to know.</p>\n<h2 id=\"why-should-i-care\">Why should I care?</h2>\n<p>Destructuring syntax is increasingly ubiquitous in the JavaScript ecosystem.\nYou’ll usually see it pulling out properties of values passed to functions or from function returns.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">printEventTargetValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current input: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> printEventTargetValue<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This might not have have saved us any code or made it any more readable, but if we were to use <code class=\"language-text\">value</code> a couple of times for different purposes, we wouldn’t have to use <code class=\"language-text\">event.target.value</code> again and again, but directly use <code class=\"language-text\">value</code> instead.<br>\nOf course that is not the only usage, but the easiest to read for now.</p>\n<h2 id=\"destructuring-syntax\">Destructuring syntax</h2>\n<p>The syntax for destructuring is an assignment. As such we can use it as a <em>left-hand-side value</em> like in the example above, but can also use it in the <em>argument list</em> and shorten the example above to something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">printEventTargetValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current input: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that this function now has <em>nested destructuring</em> instead of the chained access. We’ll get into this during the objects syntax.\nOutside the <em>argument list</em> you should usually want to put <em>declaration statements</em> like <code class=\"language-text\">const</code>, <code class=\"language-text\">let</code> or <code class=\"language-text\">var</code> in front of your destructuring. If you don’t and there is no declared variable in scope to be assigned to, it you will declare and assign to the <em>global scope</em>. If the variables have been declared in scope, the destructuring will write to those. Scoping and which <em>declaration statement</em> to use are whole other topics in themselves.</p>\n<h3 id=\"arrays\">Arrays</h3>\n<p>Destructuring arrays is positional and as such will assign values from the destructured array to the index of the assignment variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\", b: \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"a: 10, b: 5\"</span></code></pre></div>\n<p>You don’t have to take on all values of the array.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c: \"</span> <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> <span class=\"token string\">\", d: \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"c: 10, d: 5\"</span></code></pre></div>\n<p>You can also skip values.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"e: 20\"</span></code></pre></div>\n<p>If the array contains another array at some point, you can also <em>nest</em> destructs. All the same rules as above apply here.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"f: \"</span> <span class=\"token operator\">+</span> f <span class=\"token operator\">+</span> <span class=\"token string\">\", g: \"</span> <span class=\"token operator\">+</span> g <span class=\"token operator\">+</span> <span class=\"token string\">\", h: \"</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"f: 10, g: 5, h: 20\"</span></code></pre></div>\n<p><em>Nested destructuring</em> doesn’t have to be all the way to the end. Had we not wanted the values from the nested array, but the array instead, we could also have taken the whole nested array as the <em>right hand value</em> to be assigned from.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i: \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"i: [2,3]\"</span></code></pre></div>\n<p>Since array destructuring is positional, we cannot destruct the nested array and the nested arrays values into different variables at the same time.</p>\n<p>If you happen to try to destruct a nonexistent value out of the array, the value will be <code class=\"language-text\">undefined</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"j: \"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"j: undefined\"</span></code></pre></div>\n<p>You can also hackily swap the values of two variables using something along the lines of <code class=\"language-text\">[x, y] = [y, x]</code>.</p>\n<h3 id=\"objects\">Objects</h3>\n<p>Object destructuring is not positional, since Object properties do not have a deterministic order. Instead you pull out the desired fields. Same as with arrays, you can omit values. With objects, if you aren’t using the <em>rest operator</em>, all properties you didn’t specify will be omitted.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> k <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> k<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k: \"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"k: 5\"</span></code></pre></div>\n<p><em>Nested destructuring</em> is also supported. Note that only the last level will actually be assigned. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> l<span class=\"token punctuation\">,</span> m<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> n <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> l<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> n<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l: \"</span> <span class=\"token operator\">+</span> l <span class=\"token operator\">+</span> <span class=\"token string\">\", n: \"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"l: 5, n: 10\"</span></code></pre></div>\n<p>All properties we only traversed are not assigned. If we also declare during assignment like in this example, traversed properties will also not be declared. Trying to access <code class=\"language-text\">m</code> would cause <code class=\"language-text\">Uncaught ReferenceError: m is not defined</code>.</p>\n<p>Should we want to also assign a traversed property of the <em>right hand value</em>, we’ll have to make it a leaf in the tree.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> o<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> p<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> q <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> o<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> q<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o: \"</span> <span class=\"token operator\">+</span> o <span class=\"token operator\">+</span> <span class=\"token string\">\", p: \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", q: \"</span> <span class=\"token operator\">+</span> q<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"o: 5, p: {\"q\":10}, q: 10\"</span></code></pre></div>\n<p>Destructing an <code class=\"language-text\">undefined</code> property will assign <code class=\"language-text\">undefined</code> as value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> r <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r: \"</span> <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"r: undefined\"</span></code></pre></div>\n<h4 id=\"renaming-variables\">Renaming variables</h4>\n<p>During object destructuring you might want to rename a variable for readability or naming conflicts in your scope.<br>\nThe assigned name can be any legal variable name and will be passed after a colon, following the property name to be destructured from.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> r <span class=\"token operator\">:</span> thisIsMyRenamedR <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> r<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thisIsMyRenamedR: \"</span> <span class=\"token operator\">+</span> thisIsMyRenamedR<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"thisIsMyRenamedR: 5\"</span></code></pre></div>\n<p>Variable <code class=\"language-text\">r</code> is not assigned or declared, while the new given name <code class=\"language-text\">thisIsMyRenamedR</code> is.<br>\nThe syntax for renaming is still the same if it is a nested destructuring.</p>\n<p>Arrays don’t need renaming, since the destructured values are positionally named anyway.</p>\n<h4 id=\"computed-property-names\">Computed property names</h4>\n<p>The <em>property accessor</em> does not have to be a <em>static key</em>, but can also be accessed with a <em>computed property name</em> as key.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myComputedName <span class=\"token operator\">=</span> <span class=\"token string\">\"some\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"R\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>myComputedName<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> thisIsMyDynamicallyAccessedR <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> someR<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thisIsMyDynamicallyAccessedR: \"</span> <span class=\"token operator\">+</span> thisIsMyDynamicallyAccessedR<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"thisIsMyDynamicallyAccessedR: 5\"</span></code></pre></div>\n<p>If we use a computed name as <em>property accessor</em>, we also have to rename the variable that is being assigned to. Renaming might technically be a misnomer in this case. The key we used is the string value <code class=\"language-text\">&quot;someR&quot;</code>. Since this is a value, it makes it a <em>right-hand-side value</em> and thus not a valid variable name.</p>\n<h2 id=\"default-values\">Default values</h2>\n<p>Destructuring supports default values, like we have in argumentlists.<br>\nIf you’re worried about missing values or broken access chains, we can assign fallback values.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>r <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> t <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> u <span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> u<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r: \"</span> <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> <span class=\"token string\">\", s: \"</span> <span class=\"token operator\">+</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\", t: \"</span> <span class=\"token operator\">+</span> t <span class=\"token operator\">+</span> <span class=\"token string\">\", u: \"</span> <span class=\"token operator\">+</span> u<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"r: 5, s: 1, t: 3, u: 4\"</span></code></pre></div>\n<p>Default values also work for nested destructurings.</p>\n<h2 id=\"spread-vs-rest-syntax\">Spread vs. rest syntax</h2>\n<p>Both spread and rest share a syntax that changes meaning depending on context. The spec doesn’t classify <code class=\"language-text\">...</code> as an operator, but that sequence signals either a spread or rest.<br>\nThey also have different usage and behaviour depending on whether it’s an array or an object.</p>\n<p>We can generally say that if you use <code class=\"language-text\">...</code> and unpack <em>from</em> something it’s a <em>right-hand-side value</em> and as such the spread syntax, if you pack <em>into</em> something it’s a <em>left-hand-side value</em> and as such the rest syntax.</p>\n<h3 id=\"arrays-1\">Arrays</h3>\n<p>We’ll take a look at the spread operator for arrays first.<br>\nLet’s assume we have an array with multiple values and want to pass those values to a function. Said function is set to take three specific values as arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\", b: \"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\", c: \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"a: 1,2,3,4,5, b: undefined, c: undefined\"</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"a: 1, b: 2, c: 3\"</span></code></pre></div>\n<p>The first time we ran function <code class=\"language-text\">test()</code> we did not spread our array and the array itself was passed as the assignment to variable <code class=\"language-text\">a</code> on the function scope.\nOn the second time we used <code class=\"language-text\">...array</code> to spread the array. We can see the variables <code class=\"language-text\">a, b, c</code> have been assigned with the first three values of the array. The remaining array values were not assigned.</p>\n<p>If we want to capture the remaining variables of an argumentlist of unknown length, we have to use the rest syntax.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\", b: \"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\", c: \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>array<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"a: 1, b: 2, c: 3,4,5\"</span></code></pre></div>\n<p>In that example we <em>spread</em> <code class=\"language-text\">array</code> into the argumentlist of <code class=\"language-text\">test()</code> and <code class=\"language-text\">...c</code> as the rest element was assigned the remaining variables of the spread as an array.<br>\nThe rest element can always only be in the last position of the argumentlist.</p>\n<p>When spreading an array or multiple arrays inside array literals <code class=\"language-text\">[]</code>, the spread arrays will be concatenated in order as a new array. <code class=\"language-text\">[ ...[ 1, 2, 3 ], ...[ 2, 3, 4 ] ]</code> will result in the new array <code class=\"language-text\">[ 1, 2, 3, 2, 3, 4 ]</code></p>\n<h3 id=\"objects-1\">Objects</h3>\n<p>Object spread and rest can only be used in object literals <code class=\"language-text\">{}</code> and destructuring object literals respectively.  </p>\n<p>Let’s look at the rest syntax first.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> r<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>s <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> r<span class=\"token operator\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"r: \"</span> <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> <span class=\"token string\">\", s: \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"r: 7, s: {\"a\":10,\"b\":5,\"c\":20}\"</span></code></pre></div>\n<p>The value of <code class=\"language-text\">r</code> has been assigned as expected, while <code class=\"language-text\">s</code> has been assigned as a new object containing all properties that were <em>not</em> explicitly assigned.</p>\n<p>Objects spread can only be used to create new objects. The spread objects will be merged in order, with overlapping properties being overwritten as <em>last writer wins</em>. <code class=\"language-text\">{ ...{ a: 10, b: 5, c: 20}, ...{ b: 7, d: 9 }, a: 3 }</code> will result in the new object <code class=\"language-text\">{ a: 3, b: 7, c: 20, d: 9 }</code></p>\n<h2 id=\"some-usecases\">Some usecases</h2>\n<p>Destructuring reduces a lot of access chain repititions and if those accessed values are used to template, it makes those templates more concise. Renaming at the same time might also improve readability.</p>\n<p>With increasing popularity of a <em>graphql query</em>, one can also see a similar syntax between the query itself and the destructured object resulting from it.</p>\n<p>One example for all those points for me was the code for my <a href=\"/tags\">tags page</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span>\n<span class=\"token keyword\">import</span> Layout <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/layout\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TagsPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    allMarkdownRemark<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      group<span class=\"token operator\">:</span> tags\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token operator\">&lt;</span>Layout title<span class=\"token operator\">=</span><span class=\"token string\">\"All Tags\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>\n        tags<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> fieldValue<span class=\"token operator\">:</span> tagName<span class=\"token punctuation\">,</span> totalCount <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n          <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tagName<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tags/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tagName<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>tagName<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>totalCount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    allMarkdownRemark {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TagsPage</code></pre></div>\n<p>Here I destructured gatsby’s <code class=\"language-text\">pageQuery</code> <em>graphql</em> <code class=\"language-text\">data</code> object from the <em>props object</em>, renamed <code class=\"language-text\">group</code> to <code class=\"language-text\">tags</code> along the way and mapping the array of tags also destructured and renamed those properties, so I could easier use them to template with <em>jsx</em>.\nFor such a small component it might be overkill, but since the structure makes it easier for me to read, I’ve adopted it as style for all my components on the homepage.</p>\n<p>I would like to think if everyone on a project team understands and likes the syntax, it would make sense to adopt it as convention especially when there are larger objects to be consumed. Especially since <em>graphql</em> in this case describes the shape of the expected object, it’s relatively easy to verify.</p>\n<p>With the release of <a href=\"https://reactjs.org/docs/hooks-intro.html\">react hooks</a>, destructuring snuck in as well.</p>\n<h2 id=\"what-to-watch-out-for\">What to watch out for</h2>\n<p>There are a couple of things coming to mind thinking what could go wrong.<br>\nHere are a few.</p>\n<p>Confusion from shared syntax with ES Modules: <code class=\"language-text\">import { useState } from &quot;react&quot;</code> might look like destructuring at first, but it’s not exactly the same.<br>\nStolen directly from <a href=\"https://github.com/babel/babel/issues/4996\">babel</a>: “ES2015 named imports do not destructure. Use another statement for destructuring after the import.”</p>\n<p>Confusing Syntax tree: The code below fails during function declaration.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">containsError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> somethingElse <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o <span class=\"token comment\">//works</span>\n  something <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">//works</span>\n  <span class=\"token punctuation\">{</span> somethingUndeclared <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o <span class=\"token comment\">//Uncaught SyntaxError: Unexpected token '='</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We could assign the variable <code class=\"language-text\">something = 5</code>, although it was undeclared, because it is implicitly put in the <em>global scope</em>. This is a risky side-effect and should not be done.<br>\nIf we ignore that riskiness and try to do the same for <code class=\"language-text\">{ somethingUndeclared } = o</code> it will fail. The reason it fails is, because <code class=\"language-text\">{ something Undeclared }</code> is not being evaluated as a <em>left-hand-side value</em> but as a <em>block</em>. If we put parentheses like so <code class=\"language-text\">({ somethingUndeclared } = o)</code> it will be evaluated as an expression and will also assign to the <em>global scope</em>.</p>\n<p>Changing properties, mistaken immutability: JS is pass-by-value. When passing something other than the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a>, the <em>value</em> assigned is the <em>reference</em> to said object.<br>\nSince only <em>primitives</em> are immutable and as such a copy, the properties on referenced objects can be changed. The value of the calling scopes variable cannot be changed. The variable contains a <em>value</em> as <em>reference</em> not a <em>pointer</em>.<br>\nOn the same note: if new nested arrays or objects are created by spreading, they will still reference the former objects nested objects. Spreading is not a deep copy.</p>\n<p>Huge destructurings: Might be a sign of too much data and probably also too many concerns handled by a single component.<br>\nIf destructuring becomes overwhelming, it might be time to refactor something out.</p>\n<p>Future ES-proposals: Overdoing destructuring with default values might get in the way of adopting upcoming features like <a href=\"https://github.com/tc39/proposal-optional-chaining\">optional chaining</a> and <a href=\"https://github.com/tc39/proposal-nullish-coalescing\">nullish coalescing</a>. Jumping on the bandwagon can always be fun, but sometime also be overdone.<br>\nPersonally I’m looking forward to new features and I’ll be sure to try them out, while learning about them along the way.</p>","tableOfContents":"<ul>\n<li><a href=\"#why-should-i-care\">Why should I care?</a></li>\n<li>\n<p><a href=\"#destructuring-syntax\">Destructuring syntax</a></p>\n<ul>\n<li><a href=\"#arrays\">Arrays</a></li>\n<li>\n<p><a href=\"#objects\">Objects</a></p>\n<ul>\n<li><a href=\"#renaming-variables\">Renaming variables</a></li>\n<li><a href=\"#computed-property-names\">Computed property names</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#default-values\">Default values</a></li>\n<li>\n<p><a href=\"#spread-vs-rest-syntax\">Spread vs. rest syntax</a></p>\n<ul>\n<li><a href=\"#arrays-1\">Arrays</a></li>\n<li><a href=\"#objects-1\">Objects</a></li>\n</ul>\n</li>\n<li><a href=\"#some-usecases\">Some usecases</a></li>\n<li><a href=\"#what-to-watch-out-for\">What to watch out for</a></li>\n</ul>","frontmatter":{"title":"JavaScript destructuring","date":"January 25, 2020","tags":["JS","Web"],"description":"JavaScript introduced destructuring with ES6 back in 2015, but only recently I've grown really fond of it."}}},"pageContext":{"slug":"/javascript-destructuring/","previous":{"fields":{"slug":"/animating-background-gradients/"},"frontmatter":{"title":"Animated random background gradients"}},"next":null}},"staticQueryHashes":["2880777621","63159454"]}